---
import { type CollectionEntry, getCollection } from "astro:content"
import Layout from "../../layouts/Layout.astro"
import { ArrowLeft } from "lucide-astro"
import Time from "../../components/Time.astro"

export async function getStaticPaths() {
	const posts = await getCollection("blog")
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}))
}

type Props = CollectionEntry<"blog">

const {
	data: { title, description, pubDate, updatedDate, heroImage, listImage },
	render,
} = Astro.props
const { Content } = await render()
---

<Layout {title} {description} image={heroImage || listImage} prose>
	<Fragment slot="head">
		<meta property="og:type" content="article" />
		<meta property="article:published_time" content={pubDate.toISOString()} />
		{
			updatedDate && (
				<meta
					property="article:modified_time"
					content={updatedDate.toISOString()}
				/>
			)
		}
		<meta property="article:author:username" content="daimond113" />
		<meta property="article:author:gender" content="male" />
	</Fragment>

	<div class="flex w-full px-12">
		<main
			class="prose prose-main relative mx-auto w-full max-w-prose bg-body-bg dark:prose-dark dark:bg-body-bg-dark"
		>
			<a href="/blog" class="flex items-center no-underline">
				<ArrowLeft class="mr-2 size-6" />
				Back to blog
			</a>
			<p>
				<span class="text-alt-text dark:text-alt-text-dark">
					Published on
					<Time
						date={pubDate}
						class="font-bold text-body-text dark:text-body-text-dark"
					/>
				</span>
				{
					updatedDate && (
						<span class="text-alt-text dark:text-alt-text-dark">
							<br />
							Updated on
							<Time
								date={updatedDate}
								class="font-bold text-body-text dark:text-body-text-dark"
							/>
						</span>
					)
				}
			</p>
			<h1 class="mb-0">{title}</h1>
			<p class="lead mt-0 italic">{description}</p>

			<div>
				<Content />
			</div>
		</main>
	</div>
</Layout>
